#+SEQ_TODO: IDEA WRITE | POSTED
* WRITE use vs make
SawyerX' post regarding
<a href="http://blogs.perl.org/users/sawyer_x/2011/01/why-modulebuild-is-great.html">Module::Build compared to ExtUtils::MakeMaker</a>
where he compares them to Ubuntu and Slackware, respectively, made me
think of an age-old debate (occasionally bordering on holy war)
between "use" and "make", which I'll try to summarise here.

** what is use
*** buildng on existing packages
**** modules
**** libraries
*** advantages
**** rapid prototyping
**** code tosted and stable
**** different solutions
*** disadvantages
**** dependencies
**** someone else's solution
**** volnerabilites
**** work against an API
**** crap shooting
***** Formhandler
** what is make
*** create your own
*** advantages
**** just what you need
**** no dependencies
**** single point of failure
*** disadvantages
**** less work on the applicaiton
**** your solution might not be the best
**** not as tested as other
** CPAN
** OS packaged
** Deprecation policy
* IDEA why we don't really do it for free
* IDEA creating a task manager stage the second or: a crude CRUD
* WRITE LAMP
** What is LAMP
** Linux, Apache, MySQL, P
*** Perl, Python, PHP
**** Ruby?
** Jeff Waugh
http://bethesignal.org/blog/2006/03/16/what-does-lamp-stand-for/
*** Linux. Apache, Many programming languages, some of them start with P, PostgreSQL
** Linux Apache Modern::Perl Postgres
*** Even better
**** Linux, Apache, Modern Perl, Pesistence layer
* IDEA how to read perl
** perl vs. java
*** context
*** what does it mean?
** read the code
*** the SET technique
**** read line
*** the story technique
**** read the code
The strongest feature of Perl is that it allows the programmer to write
what he means instead of having to translate it to the programming language

* IDEA Should a language be implemented in itself?
** Go
** Perl
** C instead of Assembly
* IDEA Development-driven-development
** TDD
** bug-driven-development
** enough!
** everything is practice
